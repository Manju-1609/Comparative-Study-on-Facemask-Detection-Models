# -*- coding: utf-8 -*-
"""Copy of yolo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1b_36nTT2J2XmfSQVVTyOcLru138sHWbt
"""



"""# New Section"""

"""
# Commented out IPython magic to ensure Python compatibility.
#!git clone https://github.com/ultralytics/yolov5
# %cd yolov5
#!pip install -qr requirements.txt"""
import torch 
import utils
# Import required libraries
import pandas as pd
import numpy as np
import os
import glob
from datetime import datetime
import xml.etree.ElementTree as ET 
import cv2
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')

input_data = "C:/Users/PK/OneDrive/Desktop/fm-20221116T074447Z-001/fm/yolo"
output_data = "C:/Users/PK/OneDrive/Desktop/fm-20221116T074447Z-001/fm/output"

annotations_path = "C:/Users/PK/OneDrive/Desktop/fm-20221116T074447Z-001/fm/yolo/annotations"
images_path = "C:/Users/PK/OneDrive/Desktop/fm-20221116T074447Z-001/fm/yolo/images"

dataset = {
            "file":[],
            "name":[],    
            "width":[],
            "height":[],
            "xmin":[],
            "ymin":[],   
            "xmax":[],
            "ymax":[],
           }

for anno in glob.glob(annotations_path+"/*.xml"):
    tree = ET.parse(anno)
    
    for elem in tree.iter():
        if 'size' in elem.tag:
            for attr in list(elem):
                if 'width' in attr.tag: 
                    width = int(round(float(attr.text)))
                if 'height' in attr.tag:
                    height = int(round(float(attr.text)))    

        if 'object' in elem.tag:
            for attr in list(elem):
                
                if 'name' in attr.tag:
                    name = attr.text                 
                    dataset['name']+=[name]
                    dataset['width']+=[width]
                    dataset['height']+=[height] 
                    dataset['file']+=[anno.split('/')[-1][0:-4]] 
                            
                if 'bndbox' in attr.tag:
                    for dim in list(attr):
                        if 'xmin' in dim.tag:
                            xmin = int(round(float(dim.text)))
                            dataset['xmin']+=[xmin]
                        if 'ymin' in dim.tag:
                            ymin = int(round(float(dim.text)))
                            dataset['ymin']+=[ymin]                                
                        if 'xmax' in dim.tag:
                            xmax = int(round(float(dim.text)))
                            dataset['xmax']+=[xmax]                                
                        if 'ymax' in dim.tag:
                            ymax = int(round(float(dim.text)))
                            dataset['ymax']+=[ymax]

df=pd.DataFrame(dataset)
df.head()

name_dict = {
    'mask': 0,
    'no mask': 1 
}

df['class'] = df['name'].map(name_dict)
df['class']

np.sort(df.name.unique())

fileNames = [*os.listdir("C:/Users/PK/OneDrive/Desktop/fm-20221116T074447Z-001/fm/yolo/images")]
print('There are {} images in the dataset'.format(len(fileNames)))

from sklearn.model_selection import train_test_split
train, test = train_test_split(fileNames, test_size=0.1, random_state=22)
test, val = train_test_split(test, test_size=0.7, random_state=22)
print("Length of Train =",len(train))
print("="*30)
print("Length of Valid =",len(val))
print("="*30)
print("Length of test =", len(test))

# create separate train test and validation dir inside yolo/data/
#os.chdir('/content/drive/MyDrive/fm/output/')
#os.mkdir('./yolov5/data/train')
#os.mkdir('./yolov5/data/val')
#os.mkdir('./yolov5/data/test')
#os.mkdir('./yolov5/data/train/images')
#os.mkdir('./yolov5/data/train/labels')
#os.mkdir('./yolov5/data/test/images')
#os.mkdir('./yolov5/data/test/labels')
#os.mkdir('./yolov5/data/val/images')
#os.mkdir('./yolov5/data/val/labels')

from PIL import Image
#C:\Users\PK\OneDrive\Desktop\fm-20221116T074447Z-001\fm\output\yolov5\yolov5\data\train\images
def copyImages(imageList, folder_Name):
    for image in imageList:
        img = Image.open(input_data+"/images/"+image)
        img1 = img.resize((640, 480))
        _ = img1.save(output_data+"/yolov5/data/"+folder_Name+"/images/"+image)

copyImages(train, "train")
copyImages(val, "val")
copyImages(test, "test")

df.head()

df['xmax'] = (640/df['width'])*df['xmax']
df['ymax'] = (480/df['height'])*df['ymax']
df['xmin'] = (640/df['width'])*df['xmin']
df['ymin'] = (480/df['height'])*df['ymin']

df[['xmax', 'ymax', 'xmin', 'ymin']] = df[['xmax', 'ymax', 'xmin', 'ymin']].astype('int64')

df['x_center'] = (df['xmax']+df['xmin'])/(2*640)
df['y_center'] = (df['ymax']+df['ymin'])/(2*480)
df['box_height'] = (df['xmax']-df['xmin'])/(640)
df['box_width'] = (df['ymax']-df['ymin'])/(480)

df.head()

df = df.astype('string')

def create_labels(image_list, data_name):
    fileNames = [x.split(".")[0] for x in image_list]

    for name in fileNames:
        data = df[df.file==name]
        box_list = []
        
        for index in range(len(data)):
            row = data.iloc[index]
            box_list.append(row['class']+" "+row["x_cente"]+" "+row["y_cente"]/
                        +" "+row["box_height"]+" "+row["box_width"])
            
        text = "/n".join(box_list)
        with open(output_data+"/yolov5/data/"+data_name+"/labels/"+name+".txt", "w") as file:
            file.write(text)
create_labels(train, "train")
create_labels(val, "val")
create_labels(test, "test")

#C:\Users\PK\OneDrive\Desktop\fm-20221116T074447Z-001\fm\output\yolov5\data

# Commented out IPython magic to ensure Python compatibility.
# go to YOLO directory
#%cd yolov5

# to display images
from IPython.display import Image, clear_output
import torch    
#from yolov5 import utils
display = utils.notebook_init()

# Commented out IPython magic to ensure Python compatibility.
# configure .yaml file to guide the model for training
yaml_text = """train: data/train/images
val: data/train/images

nc: 2
names: ['mask','no mask']"""

with open("data/data.yaml", 'w') as file:
    file.write(yaml_text)

# %cat data/data.yaml

#customize iPython writefile so we can write variables
from IPython.core.magic import register_line_cell_magic

@register_line_cell_magic
def writetemplate(line, cell):
    with open(line, 'w') as f:
        f.write(cell.format(**globals()))
        
#C:\Users\PK\OneDrive\Desktop\fm-20221116T074447Z-001\fm\output\yolov5\yolov5\data\train 

# Commented out IPython magic to ensure Python compatibility.
# %%writetemplate models/custom_yolov5s.yaml
# 
# # parameters
# nc: 3  # number of classes
# depth_multiple: 0.33  # model depth multiple
# width_multiple: 0.50  # layer channel multiple
# 
# # anchors
# anchors:
#     - [10,13, 16,30, 33,23]  # P3/8
#     - [30,61, 62,45, 59,119]  # P4/16
#     - [116,90, 156,198, 373,326]  # P5/32
# 
# # YOLOv5 backbone
# backbone:
#   # [from, number, module, args]
#   [[-1, 1, Focus, [64, 3]],  # 0-P1/2
#    [-1, 1, Conv, [128, 3, 2]],  # 1-P2/4
#    [-1, 3, BottleneckCSP, [128]],
#    [-1, 1, Conv, [256, 3, 2]],  # 3-P3/8
#    [-1, 9, BottleneckCSP, [256]],
#    [-1, 1, Conv, [512, 3, 2]],  # 5-P4/16
#    [-1, 9, BottleneckCSP, [512]],
#    [-1, 1, Conv, [1024, 3, 2]],  # 7-P5/32
#    [-1, 1, SPP, [1024, [5, 9, 13]]],
#    [-1, 3, BottleneckCSP, [1024, False]],  # 9
#   ]
# 
# # YOLOv5 head
# head:
#     [[-1, 1, Conv, [512, 1, 1]],
#     [-1, 1, nn.Upsample, [None, 2, 'nearest']],
#     [[-1, 6], 1, Concat, [1]],  # cat backbone P4
#     [-1, 3, BottleneckCSP, [512, False]],  # 13
# 
#     [-1, 1, Conv, [256, 1, 1]],
#     [-1, 1, nn.Upsample, [None, 2, 'nearest']],
#     [[-1, 4], 1, Concat, [1]],  # cat backbone P3
#     [-1, 3, BottleneckCSP, [256, False]],  # 17 (P3/8-small)
# 
#     [-1, 1, Conv, [256, 3, 2]],
#     [[-1, 14], 1, Concat, [1]],  # cat head P4
#     [-1, 3, BottleneckCSP, [512, False]],  # 20 (P4/16-medium)
# 
#     [-1, 1, Conv, [512, 3, 2]],
#     [[-1, 10], 1, Concat, [1]],  # cat head P5
#     [-1, 3, BottleneckCSP, [1024, False]],  # 23 (P5/32-large)
# 
#     [[17, 20, 23], 1, Detect, [nc, anchors]],  # Detect(P3, P4, P5)
#     ]

start = datetime.now()
#!python yolov5/train.py --img 640 --batch 32 --epochs 50 --data data/data.yaml --cfg yolov5/models/custom_yolov5s.yaml --weights yolov5s.pt --name yolov5s_results  --cache
end = datetime.now()

print("Runtime =",end-start)

#!python yolov5/detect.py --source data/test/images/ --weight yolov5/runs/train/yolov5s_results/weights/best.pt --name expTestImage --conf 0.4

color_dict = {
    'with_mask': (0, 255, 0),
    'mask_weared_incorrect':  (0, 0, 255),
    'without_mask': (255, 0, 0) 
}

def show_image(img_id):
    df_image = df[df.file==img_id]
    df_image[['xmin', 'ymin', 'xmax', 'ymax']] = df_image[['xmin', 'ymin', 'xmax', 'ymax']].astype('int64')
    path = 'data/test/images/'+img_id# +'.png'
    img = plt.imread(path)

    imge = img.copy()

    for index in range(len(df_image)):
        row = df_image.iloc[index]
        cv2.rectangle(imge, 
                      (row['xmin'], row['ymin']),
                      (row['xmax'], row['ymax']),
                      color=color_dict[row['name']],
                      thickness=2)

    img_pred = plt.imread('yolov5/runs/detect/expTestImage2/'+img_id)
    # ===================================
    plt.figure(figsize=(14,17))

    plt.subplot(1,2,1)
    plt.imshow(imge)
    plt.axis('off')
    plt.title('Image with Truth Box')

    plt.subplot(1,2,2)
    plt.imshow(img_pred)
    plt.axis('off')
    plt.title('Image with Predicted Box')

import os, random
show_image(random.choice(os.listdir("data/test/images/"))) 
show_image(random.choice(os.listdir("data/test/images/"))) 
plt.show()

